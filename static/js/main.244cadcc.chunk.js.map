{"version":3,"sources":["SearchBar.js","allVideos.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","handelTextInput","searching","className","type","placeholder","onChange","onKeyPress","AllVideos","results","useState","map","result","ImgUrl","concat","poster_path","onClick","moviePage","id","window","location","href","console","log","src","title","App","input","text","setText","event","target","value","prevText","key","axios","api","then","SearchResults","data","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sOAaeA,MAVf,YAAoD,IAA/BC,EAA8B,EAA9BA,gBAAiBC,EAAa,EAAbA,UAClC,OACI,yBAAKC,UAAU,aACX,2BACRC,KAAK,OAAOC,YAAY,wBAAwBF,UAAU,aAAaG,SAAUL,EAAiBM,WAAYL,M,iBCiCnGM,MArCf,YAA+B,IAAXC,EAAU,EAAVA,QAAU,EAETC,mBAAS,GAFA,mBAgB1B,OAhB0B,UAM9BD,EAAQE,KAAI,SAAAC,OAWJ,yBAAKT,UAAU,WACVM,EAAQE,KAAI,SAAAC,GACX,IAAIC,EAAS,GAAGC,OAhBhB,mDAgBgCF,EAAOG,aAErC,OACI,yBAAKZ,UAAU,SAASa,QAAU,WAC7B,IAAIC,EAAY,oCAAsCL,EAAOM,GAC7DC,OAAOC,SAASC,KAAOJ,EACvBK,QAAQC,IAAIN,KAEb,yBAAKO,IAAKX,IACV,4BAAKD,EAAOa,aCmBrBC,MA5Cf,WAAe,MAEYhB,mBAAS,CAChCiB,MAAQ,GACRlB,QAAS,KAJE,mBAENmB,EAFM,KAECC,EAFD,KA+Bb,OACE,yBAAK1B,UAAU,OACb,gCACE,kDAEF,yBAAKA,UAAU,aACf,kBAAC,EAAD,CAAQF,gBA5BY,SAAC6B,GACvB,IAAIH,EAAQG,EAAMC,OAAOC,MACzBH,GAAQ,SAAAI,GACN,OAAO,2BAAIA,GAAX,IAAqBN,MAAOA,QAyBezB,UApB7B,SAAC4B,GACC,UAAdA,EAAMI,KACRC,IAAMC,4FAAkBR,EAAKD,OAAOU,MAAK,YAAe,IAClDC,EADiD,EAAXC,KACjB9B,QAEzBoB,GAAQ,SAAAI,GACN,OAAO,2BAAKA,GAAZ,IAAsBxB,QAAS6B,aAejC,kBAAC,EAAD,CAAW7B,QAASmB,EAAKnB,aChCb+B,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.244cadcc.chunk.js","sourcesContent":["\nimport React from 'react'\n\nfunction SearchBar({ handelTextInput, searching }) {\n    return (\n        <div className=\"searchbar\">\n            <input \n\t\t\t\ttype=\"text\" placeholder=\"Search for a Video...\" className=\"search-bar\" onChange={handelTextInput} onKeyPress={searching}\n\t\t\t/>\n        </div>\n    )\n}\n\nexport default SearchBar\n","import React,{useState} from 'react'\n//import SelectedVideo from './selectedVideo'\n\nfunction AllVideos({results}) {\n//console.log(results)\nconst [id , setId] = useState(0)\nvar baseUrl = \"https://image.tmdb.org/t/p/w600_and_h900_bestv2/\"\n\n\nresults.map(result => {})\n\n\n// const openMoviePage = () =>{\n//    results.map(result => {\n//     var moviePage = \"https://www.themoviedb.org/movie/\" + id\n//     window.location.href = moviePage;\n//     console.log(moviePage)\n//     })\n// }\n    return (\n        <div className=\"results\">\n            {results.map(result => {\n              var ImgUrl = ''.concat(baseUrl, result.poster_path);\n             \n                return(\n                    <div className=\"result\" onClick= {function openMoviePage () {\n                         var moviePage = \"https://www.themoviedb.org/movie/\" + result.id\n                         window.location.href = moviePage;\n                         console.log(moviePage)\n                    }}>\n                        <img src={ImgUrl}/>\n                        <h3>{result.title}</h3>\n                    </div>\n                \n\t\t\t)})\n            }\n        </div>\n    )\n}\n\nexport default AllVideos\n","import React, {useState} from 'react';\nimport Search from './SearchBar'\nimport axios from 'axios'\nimport AllVideos from './allVideos';\n\n\nfunction App() {\n  // creating state to handle text changes\n  const [text , setText] = useState({\n    input : \"\",\n    results: [],\n  });\n\n  const api = \"https://api.themoviedb.org/3/search/movie?api_key=468a3e5868a2156306ec2772e6c28f9e\";\n  \n  const handelTextInput = (event) => {\n    var input = event.target.value;\n    setText(prevText => {\n      return {...prevText, input: input}\n    })\n    //console.log(text.input)\n  }\n\n  const searching = (event) => {\n    if (event.key === \"Enter\") {\n      axios(api + \"&query=\" + text.input).then(({ data }) => {\n        var SearchResults = data.results;\n       //console.log(data)\n        setText(prevText => {\n          return { ...prevText, results: SearchResults }\n        })\n      });\n    }\n   \n  }\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Movie Application</h1>\n      </header>\n      <div className=\"searching\">\n      <Search handelTextInput ={handelTextInput} searching ={searching}/>\n        <AllVideos results={text.results}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}